<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>note on Yorksite</title>
    <link>https://yorks0n.github.io/tags/note/</link>
    <description>Recent content in note on Yorksite</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Mar 2023 09:30:49 +0000</lastBuildDate><atom:link href="https://yorks0n.github.io/tags/note/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker 打包 Shiny App</title>
      <link>https://yorks0n.github.io/posts/docker-pack-shiny-app/</link>
      <pubDate>Tue, 28 Mar 2023 09:30:49 +0000</pubDate>
      
      <guid>https://yorks0n.github.io/posts/docker-pack-shiny-app/</guid>
      <description>文件准备 将Shiny用到的server.R和ui.R一起放在app文件夹中
./app: server.R ui.R 写个Dockerfile，把用到的包都写在 install.r 后面
FROM rocker/r-base:latest LABEL maintainer=&amp;#34;email &amp;lt;example@mail.com&amp;gt;&amp;#34; RUN apt-get update &amp;amp;&amp;amp; apt-get install -y --no-install-recommends \ sudo \ libcurl4-gnutls-dev \ libcairo2-dev \ libxt-dev \ libssl-dev \ libssh2-1-dev \ &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/* RUN install.r shiny shinyBS dplyr stringr RUN echo &amp;#34;local(options(shiny.port = 3838, shiny.host = &amp;#39;0.0.0.0&amp;#39;))&amp;#34; &amp;gt; /usr/lib/R/etc/Rprofile.site RUN addgroup --system app \ &amp;amp;&amp;amp; adduser --system --ingroup app app WORKDIR /home/app COPY app . RUN chown app:app -R /home/app USER app EXPOSE 3838 CMD [&amp;#34;R&amp;#34;, &amp;#34;-e&amp;#34;, &amp;#34;shiny::runApp(&amp;#39;/home/app&amp;#39;)&amp;#34;] 按以下方式进行构建</description>
    </item>
    
    <item>
      <title>部署预印本追踪 TRxiv 到 Github Action</title>
      <link>https://yorks0n.github.io/posts/deploy-trxiv-github-action/</link>
      <pubDate>Fri, 24 Mar 2023 16:30:23 +0000</pubDate>
      
      <guid>https://yorks0n.github.io/posts/deploy-trxiv-github-action/</guid>
      <description>将JS写的抓取 Altmetric 热门预印本，与 bioRxiv API 结合后储存在 csv 文件中的过程，部署在 Github Action 中。官方文档写的顺序都有点混乱，网上找到的教程又经常都比较老了，因此自己记录一个。
新建Github仓库 新建一个public仓库，名叫TRxiv，并将远程仓库git clone到本地。
git clone git@github.com:Yorks0n/TRxiv.git cd TRxiv 创建一个动作元数据文件 要让仓库里能被以Action的形式直接调用，需要在根目录中创建一个action.yml配置文件，可以在这个文件中指定Action的输入和输出，调用的参数及运行环境
# action.yml name: &amp;#39;trxiv&amp;#39; description: &amp;#39;Tracking popular bioRxiv and medRxiv preprints&amp;#39; runs: using: &amp;#39;node16&amp;#39; main: &amp;#39;dist/index.js&amp;#39; 准备运行的代码 手动将写好的JS脚本拷贝进来，完整代码在此 Yorkson/TRxiv。
# 在这里初始化一下npm npm init -y 准备一个.gitignore文件，防止在推送的时候把不必要的文件放到储存库，可以用下面这个工具，或者自己写一下，比如这里就可能有node_modules
https://www.toptal.com/developers/gitignore
文件推送到远程仓库 然后push到远程仓库
git add . git commit -m &amp;#34;Initialize&amp;#34; git push 打包软件 因为前面把node_modules 从上传的文件列表中忽略了，但脚本index.js内有些依赖的包，所以最好把软件和依赖打包在一起，官方推荐用ncc
npm install @vercel/ncc 然后对index.js 进行打包
ncc build index.js -o dist 打包产物会存放于dist/index.</description>
    </item>
    
  </channel>
</rss>
